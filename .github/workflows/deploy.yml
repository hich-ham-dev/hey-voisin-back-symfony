name: Deploy Symfony Docker

on:
  push:
    branches:
      - main

jobs:
  build-test-deploy:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build image for testing
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: symfony-app:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            APP_ENV=test

      - name: Run PHPUnit tests
        run: |
          docker run --rm symfony-app:test bin/phpunit
        continue-on-error: false

      - name: Create production environment files
        run: |
          # Fichier principal avec variables non-sensibles
          cat > .env.prod << EOL
          APP_ENV=prod
          APP_DEBUG=0
          USER_ID=1000
          GROUP_ID=1000
          MESSENGER_TRANSPORT_DSN=doctrine://default?auto_setup=0
          JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem
          JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem
          EOL
          
          # Fichier avec les secrets
          cat > .env.prod.local << EOL
          APP_SECRET=${{ secrets.APP_SECRET }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MAILER_DSN=${{ secrets.MAILER_DSN }}
          CORS_ALLOW_ORIGIN=${{ secrets.CORS_ALLOW_ORIGIN }}
          JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}
          EOL

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions

      - name: Deploy to VPS
        run: |
          # Copier les fichiers vers le VPS
          scp -i ~/.ssh/github_actions -r docker-compose.yml Dockerfile docker .env.prod .env.prod.local ${{ secrets.USER }}@${{ secrets.HOST }}:${{ secrets.APP_PATH }}
          
          # Exécuter les commandes de déploiement sur le VPS
          ssh -i ~/.ssh/github_actions ${{ secrets.USER }}@${{ secrets.HOST }} << 'EOF'
            cd ${{ secrets.APP_PATH }}
          
            # Fusionner les fichiers d'environnement
            cat .env.prod .env.prod.local > .env
          
            # Copier les certificats SSL
            mkdir -p docker/nginx/ssl
            cp /etc/letsencrypt/live/hey-voisin-api.hicham-hamza.dev/fullchain.pem docker/nginx/ssl/
            cp /etc/letsencrypt/live/hey-voisin-api.hicham-hamza.dev/privkey.pem docker/nginx/ssl/
            chmod -R 755 docker/nginx/ssl
          
            # Arrêter et reconstruire les containers
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d
          
            # Exécuter les migrations
            docker-compose exec -T app php bin/console doctrine:migrations:migrate --no-interaction --env=prod --allow-no-migration
          
            # Nettoyer les anciennes images
            docker image prune -af
          EOF

      # Workaround pour corriger le cache de buildx
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache