name: Symfony API CI/CD
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: symfony-app:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            APP_ENV=test
      
      - name: Run PHPUnit tests
        run: |
          docker run --rm symfony-app:test bin/phpunit
      
      # Corrige le cache de buildx
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build:
    name: Build & Push Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            APP_ENV=prod
      
      # Corrige le cache de buildx
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_REPOSITORY
          script: |
            # Debug
            echo "Secret DOMAIN_NAME transmis : ${{ secrets.DOMAIN_NAME }}"
            echo "GITHUB_REPOSITORY : $GITHUB_REPOSITORY"

            # S'arrêter à la première erreur
            set -e
            
            # Vérifier si le réseau proxy existe déjà
            if ! docker network ls | grep -q proxy; then
              echo "Création du réseau proxy..."
              docker network create proxy
            else
              echo "Le réseau proxy existe déjà."
            fi
            
            # Téléchargement direct de l'image Docker
            docker pull ghcr.io/${GITHUB_REPOSITORY}:latest
            
            # Création du fichier .env.prod avec variables non-sensibles
            cat > ~/sites/hey-voisin/api/.env.prod << EOL
            APP_ENV=prod
            APP_DEBUG=0
            USER_ID=1000
            GROUP_ID=1000
            MESSENGER_TRANSPORT_DSN=doctrine://default?auto_setup=0
            JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem
            JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem
            MYSQL_DATABASE=hey_voisin_prod_db
            MYSQL_USER=hey_voisin_prod_user
            EOL
            
            # Création du fichier .env.prod.local avec les secrets
            cat > ~/sites/hey-voisin/api/.env.prod.local << EOL
            APP_SECRET=${{ secrets.APP_SECRET }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MAILER_DSN=${{ secrets.MAILER_DSN }}
            CORS_ALLOW_ORIGIN=${{ secrets.CORS_ALLOW_ORIGIN }}
            JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            EOL
            
            # Création de docker-compose.prod.yml
            cat > ~/sites/hey-voisin/api/docker-compose.prod.yml << EOL
            version: '3'
            
            services:
              # Service PHP-FPM pour Symfony
              app:
                image: ghcr.io/${GITHUB_REPOSITORY}:latest
                container_name: hey_voisin_app
                restart: unless-stopped
                volumes:
                  - hey_voisin_app_data:/var/www/symfony/var
                environment:
                  - APP_ENV=${APP_ENV:-prod}
                  - APP_SECRET=${APP_SECRET}
                  - DATABASE_URL=${DATABASE_URL}
                  - DOMAIN_NAME=${DOMAIN_NAME}
                networks:
                  - hey_voisin_network
                  - proxy
                depends_on:
                  - database
            
              # Serveur web Nginx
              web:
                image: nginx:1.25-alpine
                container_name: hey_voisin_nginx
                restart: unless-stopped
                volumes:
                  - ./nginx/conf.d:/etc/nginx/conf.d
                  - hey_voisin_app_data:/var/www/symfony/var
                depends_on:
                  - app
                networks:
                  - hey_voisin_network
                  - proxy
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.heyvoisin.rule=Host(`${DOMAIN_NAME}`)"
                  - "traefik.http.routers.heyvoisin.entrypoints=websecure"
                  - "traefik.http.routers.heyvoisin.tls=true"
                  - "traefik.http.routers.heyvoisin.tls.certresolver=le"
                  - "traefik.http.services.heyvoisin.loadbalancer.server.port=80"
            
              # Base de données MariaDB/MySQL
              database:
                image: mariadb:11.4
                container_name: hey_voisin_db
                restart: unless-stopped
                environment:
                  - MYSQL_ROOT_PASSWORD=\${MYSQL_ROOT_PASSWORD}
                  - MYSQL_DATABASE=\${MYSQL_DATABASE}
                  - MYSQL_USER=\${MYSQL_USER}
                  - MYSQL_PASSWORD=\${MYSQL_PASSWORD}
                volumes:
                  - hey_voisin_db_data:/var/lib/mysql
                networks:
                  - hey_voisin_network
            
            volumes:
              hey_voisin_app_data:
              hey_voisin_db_data:
            
            networks:
              hey_voisin_network:
                driver: bridge
              proxy:
                external: true
            EOL
            
            # Création de la configuration nginx
            cat > ~/sites/hey-voisin/api/nginx/conf.d/default.conf << EOL
            server {
                listen 80;
                server_name localhost;
                root /var/www/symfony/public;
            
                location / {
                    try_files \$uri /index.php\$is_args\$args;
                }
            
                location ~ ^/index\.php(/|$) {
                    fastcgi_pass app:9000;
                    fastcgi_split_path_info ^(.+\.php)(/.*)$;
                    include fastcgi_params;
                    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                    fastcgi_param DOCUMENT_ROOT \$document_root;
                    internal;
                }
            
                location ~ \.php$ {
                    return 404;
                }
            }
            EOL
            
            # Se déplacer dans le répertoire du projet
            cd ~/sites/hey-voisin/api
            
            # Fusionner les fichiers d'environnement
            cat .env.prod .env.prod.local > .env
            
            # Afficher le contenu de DOMAIN_NAME pour vérification
            echo "Vérification de la variable DOMAIN_NAME:"
            grep "DOMAIN_NAME" .env
            export $(grep -v '^#' .env | xargs)
            echo "Valeur de DOMAIN_NAME = ${DOMAIN_NAME}"
            
            # Arrêter les conteneurs via docker-compose
            echo "Arrêt des conteneurs existants..."
            docker-compose -f docker-compose.prod.yml down || true
            
            # Nettoyage forcé pour tous les conteneurs du projet
            echo "Nettoyage forcé des conteneurs restants..."
            for container in $(docker ps -a --filter name=hey_voisin_ --format "{{.Names}}"); do
              echo "Suppression forcée de $container..."
              docker stop $container 2>/dev/null || true
              docker rm $container 2>/dev/null || true
            done
            
            # Démarrer les conteneurs avec recréation forcée
            echo "Démarrage des conteneurs..."
            docker-compose -f docker-compose.prod.yml up -d --force-recreate
            
            # Attendre que Traefik obtienne le certificat SSL
            echo "Attente de l'obtention du certificat SSL..."
            sleep 30  # Attendre 30 secondes pour que Traefik ait le temps d'obtenir le certificat
            
            # Vérifier si Traefik est bien configuré
            echo "Vérification de la configuration Traefik..."
            if docker ps | grep -q traefik; then
              echo "Traefik est en cours d'exécution."
              # Vérifier les logs de Traefik pour les problèmes de certificats
              docker logs $(docker ps -q -f name=traefik) 2>&1 | grep -i "certif" | tail -20
            else
              echo "ATTENTION: Traefik ne semble pas être en cours d'exécution. Vérifiez votre installation Traefik."
            fi
            
            # Attendre que la base de données soit prête
            echo "Attente du démarrage de la base de données..."
            sleep 20
            
            # Exécuter les migrations (avec gestion des erreurs)
            docker-compose -f docker-compose.prod.yml exec -T app php bin/console doctrine:migrations:migrate --no-interaction --env=prod --allow-no-migration || {
              echo "Erreur lors des migrations. Vérification du statut des conteneurs:"
              docker-compose -f docker-compose.prod.yml ps
              echo "Logs du conteneur app:"
              docker-compose -f docker-compose.prod.yml logs app
            }
            
            # Nettoyer les anciennes images
            docker image prune -af
